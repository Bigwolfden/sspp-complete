<launch>
  <arg name="debug"       default="false" />
  <arg name="useValgrind" default="false" />
  <!-- Load RotorS -->
  <arg name="mav_name" default="iris"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <!-- Choose which model to plan around -->
  <arg name="model_name" default="x-35small" />

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
    <!--<node name="waypoint_publisher_file" pkg="rotors_gazebo" type="waypoint_publisher_file" output="screen" args="$(find rotors_gazebo)/resource/example_waypoints.txt"/>-->
    <node name="waypoint_publisher_sspp" pkg="sspp_simulator" type="waypoint_publisher_sspp" output="screen">
      <param name="start_x" type="double" value="-2.12" />
      <param name="start_y" type="double" value="-1.2" />
      <param name="start_z" type="double" value="0.2" />
      <param name="end_x" type="double" value="2.0" />
      <param name="end_y" type="double" value="3.2" />
      <param name="end_z" type="double" value="1.2" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>
  <!-- End of RotorS stuff-->

  <!-- Fake transform from world origin to robot origin (base) -->
  <node pkg="tf" type="static_transform_publisher" name="base_to_world" args="0 0 0 0 0 0 /world /base 30" />

  <arg name="tf_frame" default="world" />
  <arg name="resolution" default="0.3" />
  <arg name="visualize_max_z" default="3" />
  <arg name="sensor_max_range" default="15.0" />

  <group if="$(arg debug)">
      <arg name="launch_prefix" value="gdb --ex run --args" unless="$(arg useValgrind)"  />
      <arg name="launch_prefix" value="valgrind" if="$(arg useValgrind)"/>
      <node name="reactive_planner_server_node" launch-prefix="$(arg launch_prefix)" pkg="sspp" type="reactive_planner_server_node" output="screen">
            <!-- Volumetic Mapping Params -->
            <param name="tf_frame" type="string" value="$(arg tf_frame)" />
            <param name="resolution" type="double" value="$(arg resolution)" />
            <param name="visualize_max_z" type="double" value="$(arg visualize_max_z)" />
            <param name="sensor_max_range" type="double" value="$(arg sensor_max_range)" />
            <param name="map_publish_frequency" type="double" value="1.0" />
            <param name="treat_unknown_as_occupied" type="bool" value="false" />
            <!-- Path Planning Params -->
            <param name="visualize_search_space" type="bool" value="false" />
            <param name="debug" type="bool" value="false" />
            <param name="sample_orientations" type="bool" value="false" />
            <param name="orientation_sampling_res"  type="double" value="90.0" />
            <param name="tree_progress_display_freq"  type="int" value="-1" />
            <param name="debug_delay"      type="double" value="0.0" />
            <param name="dist_to_goal"     type="double" value="0.5" />
            <param name="connection_rad"   type="double" value="1.5" />
            <param name="grid_resolution"  type="double" value="1.0" />
            <param name="grid_size_x"      type="double" value="10.0" />
            <param name="grid_size_y"      type="double" value="10.0" />
            <param name="grid_size_z"      type="double" value="2.0" />
            <param name="grid_start_x"     type="double" value="0.0" />
            <param name="grid_start_y"     type="double" value="0.0" />
            <param name="grid_start_z"     type="double" value="0.0" />
      </node>
  </group>
  <group unless="$(arg debug)">
      <arg name="launch_prefix" value=""/>
      <node name="reactive_planner_server_node" launch-prefix="$(arg launch_prefix)" pkg="sspp" type="reactive_planner_server_node" output="screen">
            <!-- Volumetic Mapping Params -->
            <param name="tf_frame" type="string" value="$(arg tf_frame)" />
            <param name="resolution" type="double" value="$(arg resolution)" />
            <param name="visualize_max_z" type="double" value="$(arg visualize_max_z)" />
            <param name="sensor_max_range" type="double" value="$(arg sensor_max_range)" />
            <param name="map_publish_frequency" type="double" value="1.0" />
            <param name="treat_unknown_as_occupied" type="bool" value="false" />
            <!-- Path Planning Params -->
            <param name="visualize_search_space" type="bool" value="false" />
            <param name="debug" type="bool" value="false" />
            <param name="sample_orientations" type="bool" value="false" />
            <param name="orientation_sampling_res"  type="double" value="90.0" />
            <param name="tree_progress_display_freq"  type="int" value="-1" />
            <param name="debug_delay"      type="double" value="0.0" />
            <param name="dist_to_goal"     type="double" value="0.5" />
            <param name="connection_rad"   type="double" value="1.5" />
            <param name="grid_resolution"  type="double" value="1.0" />
            <param name="grid_size_x"      type="double" value="10.0" />
            <param name="grid_size_y"      type="double" value="10.0" />
            <param name="grid_size_z"      type="double" value="4.0" />
            <param name="grid_start_x"     type="double" value="0.0" />
            <param name="grid_start_y"     type="double" value="0.0" />
            <param name="grid_start_z"     type="double" value="0.0" />
      </node>
  </group>

  <node pkg="pcl_ros" type="pcd_to_pointcloud" name="spawn_pcd_to_pcl" output="screen" args ="$(find sspp)/pcd/$(arg model_name).pcd 1" >
    <param name="frame_id" value="/world" />
  </node>

  <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
        args="-d $(find sspp)/rviz/reactive_planner_test.rviz" output="screen">
  </node>
</launch>
